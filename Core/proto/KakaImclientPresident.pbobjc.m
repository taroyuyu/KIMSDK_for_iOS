// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KakaIMClientPresident.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "KakaImclientPresident.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - KIMProtoKakaImclientPresidentRoot

@implementation KIMProtoKakaImclientPresidentRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - KIMProtoKakaImclientPresidentRoot_FileDescriptor

static GPBFileDescriptor *KIMProtoKakaImclientPresidentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"kakaIM.president"
                                                 objcPrefix:@"KIMProto"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - KIMProtoRequestNodeMessage

@implementation KIMProtoRequestNodeMessage

@dynamic hasUserAccount, userAccount;
@dynamic hasLongitude, longitude;
@dynamic hasLatitude, latitude;

typedef struct KIMProtoRequestNodeMessage__storage_ {
  uint32_t _has_storage_[1];
  float longitude;
  float latitude;
  NSString *userAccount;
} KIMProtoRequestNodeMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAccount",
        .dataTypeSpecific.className = NULL,
        .number = KIMProtoRequestNodeMessage_FieldNumber_UserAccount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KIMProtoRequestNodeMessage__storage_, userAccount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = KIMProtoRequestNodeMessage_FieldNumber_Longitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KIMProtoRequestNodeMessage__storage_, longitude),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = KIMProtoRequestNodeMessage_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KIMProtoRequestNodeMessage__storage_, latitude),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KIMProtoRequestNodeMessage class]
                                     rootClass:[KIMProtoKakaImclientPresidentRoot class]
                                          file:KIMProtoKakaImclientPresidentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KIMProtoRequestNodeMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KIMProtoNodeInfo

@implementation KIMProtoNodeInfo

@dynamic hasIpAddr, ipAddr;
@dynamic hasPort, port;

typedef struct KIMProtoNodeInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t port;
  NSString *ipAddr;
} KIMProtoNodeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ipAddr",
        .dataTypeSpecific.className = NULL,
        .number = KIMProtoNodeInfo_FieldNumber_IpAddr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KIMProtoNodeInfo__storage_, ipAddr),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = KIMProtoNodeInfo_FieldNumber_Port,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KIMProtoNodeInfo__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KIMProtoNodeInfo class]
                                     rootClass:[KIMProtoKakaImclientPresidentRoot class]
                                          file:KIMProtoKakaImclientPresidentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KIMProtoNodeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KIMProtoResponseNodeMessage

@implementation KIMProtoResponseNodeMessage

@dynamic nodeArray, nodeArray_Count;
@dynamic hasErrorType, errorType;

typedef struct KIMProtoResponseNodeMessage__storage_ {
  uint32_t _has_storage_[1];
  KIMProtoResponseNodeMessage_Error errorType;
  NSMutableArray *nodeArray;
} KIMProtoResponseNodeMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueMessage = nil,
        .core.name = "nodeArray",
        .core.dataTypeSpecific.className = GPBStringifySymbol(KIMProtoNodeInfo),
        .core.number = KIMProtoResponseNodeMessage_FieldNumber_NodeArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(KIMProtoResponseNodeMessage__storage_, nodeArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeMessage,
      },
      {
        .defaultValue.valueEnum = KIMProtoResponseNodeMessage_Error_ServerInternalError,
        .core.name = "errorType",
        .core.dataTypeSpecific.enumDescFunc = KIMProtoResponseNodeMessage_Error_EnumDescriptor,
        .core.number = KIMProtoResponseNodeMessage_FieldNumber_ErrorType,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(KIMProtoResponseNodeMessage__storage_, errorType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KIMProtoResponseNodeMessage class]
                                     rootClass:[KIMProtoKakaImclientPresidentRoot class]
                                          file:KIMProtoKakaImclientPresidentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(KIMProtoResponseNodeMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum KIMProtoResponseNodeMessage_Error

GPBEnumDescriptor *KIMProtoResponseNodeMessage_Error_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ServerInternalError\000";
    static const int32_t values[] = {
        KIMProtoResponseNodeMessage_Error_ServerInternalError,
    };
    static const char *extraTextFormatInfo = "\001\000\023\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(KIMProtoResponseNodeMessage_Error)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:KIMProtoResponseNodeMessage_Error_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL KIMProtoResponseNodeMessage_Error_IsValidValue(int32_t value__) {
  switch (value__) {
    case KIMProtoResponseNodeMessage_Error_ServerInternalError:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
